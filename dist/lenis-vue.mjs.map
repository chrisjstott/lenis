{"version":3,"file":"lenis-vue.mjs","sources":["../src/index.ts"],"sourcesContent":["import Lenis from 'lenis'\nimport type { Plugin } from 'vue'\nimport {\n  defineComponent,\n  h,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  PropType,\n  provide,\n  ref,\n  Ref,\n} from 'vue'\n\nexport const LenisSymbol = Symbol('LenisContext')\n\nexport function useLenis(callback = () => {}) {\n  const lenis = inject<Ref<Lenis>>(LenisSymbol)\n\n  if (!lenis) {\n    throw new Error('No global nor local lenis provider was found')\n  }\n\n  lenis.value?.on('scroll', callback)\n\n  onBeforeUnmount(() => lenis.value?.off('scroll', callback))\n\n  return lenis\n}\n\nexport interface LenisVueProps {\n  root?: boolean\n  autoRaf?: boolean\n  options?: ConstructorParameters<typeof Lenis>[0]\n}\n\nexport const LenisVue = defineComponent({\n  name: 'LenisVue',\n  props: {\n    root: {\n      type: Boolean as PropType<boolean>,\n      default: false,\n    },\n    autoRaf: {\n      type: Boolean as PropType<boolean>,\n      default: true,\n    },\n    options: {\n      type: Object as PropType<ConstructorParameters<typeof Lenis>[0]>,\n      default: () => ({}),\n    },\n  },\n  setup(props: LenisVueProps, { slots }) {\n    const lenis: Ref<Lenis | null> = ref(null)\n    const wrapper = ref<HTMLDivElement>()\n    const content = ref<HTMLDivElement>()\n\n    onMounted(() => {\n      lenis.value = new Lenis({\n        ...props.options,\n        ...(!props.root\n          ? {\n              wrapper: wrapper.value,\n              content: content.value,\n            }\n          : {}),\n      })\n\n      if (props.autoRaf) {\n        function raf(time: number) {\n          lenis.value?.raf(time)\n          requestAnimationFrame(raf)\n        }\n\n        requestAnimationFrame(raf)\n      }\n    })\n\n    onBeforeUnmount(() => {\n      lenis.value?.destroy()\n    })\n\n    provide(LenisSymbol, lenis)\n\n    return () => {\n      if (props.root) {\n        return slots.default?.()\n      } else {\n        return h('div', { class: 'lenis', ref: wrapper }, [\n          h('div', { ref: content }, slots.default?.()),\n        ])\n      }\n    }\n  },\n})\n\ndeclare module 'vue' {\n  export interface GlobalComponents {\n    lenis: typeof LenisVue\n  }\n}\n\nconst plugin: Plugin = (app) => {\n  app.component('lenis', LenisVue)\n}\n\nexport default plugin\n"],"names":["LenisSymbol","useLenis","callback","lenis","inject","_a","onBeforeUnmount","LenisVue","defineComponent","props","slots","ref","wrapper","content","onMounted","Lenis","raf","time","provide","h","_b","plugin","app"],"mappings":";;AAca,MAAAA,IAAc,OAAO,cAAc;AAEhC,SAAAC,EAASC,IAAW,MAAM;AAAC,GAAG;;AACtC,QAAAC,IAAQC,EAAmBJ,CAAW;AAE5C,MAAI,CAACG;AACG,UAAA,IAAI,MAAM,8CAA8C;AAG1D,UAAAE,IAAAF,EAAA,UAAA,QAAAE,EAAO,GAAG,UAAUH,IAE1BI,EAAgB,MAAM;;AAAA,YAAAD,IAAAF,EAAM,UAAN,gBAAAE,EAAa,IAAI,UAAUH;AAAA,GAAS,GAEnDC;AACT;AAQO,MAAMI,IAAWC,EAAgB;AAAA,EACtC,MAAM;AAAA,EACN,OAAO;AAAA,IACL,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS,OAAO,CAAA;AAAA,IAClB;AAAA,EACF;AAAA,EACA,MAAMC,GAAsB,EAAE,OAAAC,KAAS;AAC/B,UAAAP,IAA2BQ,EAAI,IAAI,GACnCC,IAAUD,KACVE,IAAUF;AAEhB,WAAAG,EAAU,MAAM;AAWd,UAVMX,EAAA,QAAQ,IAAIY,EAAM;AAAA,QACtB,GAAGN,EAAM;AAAA,QACT,GAAKA,EAAM,OAKP,CAAC,IAJD;AAAA,UACE,SAASG,EAAQ;AAAA,UACjB,SAASC,EAAQ;AAAA,QAAA;AAAA,MAElB,CACN,GAEGJ,EAAM,SAAS;AACR,YAAAO,IAAT,SAAaC,GAAc;;AACnB,WAAAZ,IAAAF,EAAA,UAAA,QAAAE,EAAO,IAAIY,IACjB,sBAAsBD,CAAG;AAAA,QAAA;AAG3B,8BAAsBA,CAAG;AAAA,MAC3B;AAAA,IAAA,CACD,GAEDV,EAAgB,MAAM;;AACpB,OAAAD,IAAAF,EAAM,UAAN,QAAAE,EAAa;AAAA,IAAQ,CACtB,GAEDa,EAAQlB,GAAaG,CAAK,GAEnB,MAAM;;AACX,aAAIM,EAAM,QACDJ,IAAAK,EAAM,YAAN,gBAAAL,EAAA,KAAAK,KAEAS,EAAE,OAAO,EAAE,OAAO,SAAS,KAAKP,KAAW;AAAA,QAChDO,EAAE,OAAO,EAAE,KAAKN,MAAWO,IAAAV,EAAM,YAAN,gBAAAU,EAAA,KAAAV,EAAiB;AAAA,MAAA,CAC7C;AAAA,IACH;AAAA,EAEJ;AACF,CAAC,GAQKW,IAAiB,CAACC,MAAQ;AAC1B,EAAAA,EAAA,UAAU,SAASf,CAAQ;AACjC;"}